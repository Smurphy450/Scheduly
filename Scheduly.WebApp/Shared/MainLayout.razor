@inherits LayoutComponentBase
@inject NavigationManager Navigation

<PageTitle>Scheduly</PageTitle>

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	@if (!IsLoginPage)
	{
		<MudAppBar Elevation="0">
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
			<MudSpacer />
			<MudToggleIconButton Toggled="_isDarkMode" ToggledChanged="OnDarkModeChanged"
								 Icon="@Icons.Material.Filled.DarkMode" Color="Color.Dark" Title="Switch to Light Mode"
								 ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Warning" ToggledTitle="Switch to Dark Mode" />
		</MudAppBar>
		<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Breakpoint="@_breakpoint" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
			<NavMenu />
		</MudDrawer>
	}
	<MudMainContent>
		<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-2 pt-2">
			@Body
		</MudContainer>
	</MudMainContent>
</MudLayout>

@code {
	private bool IsLoginPage => Navigation.Uri.EndsWith("/");
	private Breakpoint _breakpoint = Breakpoint.Xl;
	private bool _isDarkMode = true;
	private bool _drawerOpen = false;

	protected override void OnInitialized()
	{
		Navigation.LocationChanged += HandleLocationChanged;
	}

	private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		Navigation.LocationChanged -= HandleLocationChanged;
	}

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	public void OnDarkModeChanged(bool isDarkMode)
	{
		_isDarkMode = isDarkMode;
	}
}